
------------
SYMFONY
------------

Yakine HAMIDA
yakine.hamida@evogue.fr 

-------------

notions:
MVC = model view controller , model pour la base de donnée, view pour les pages , 

-------------

1/ Révisions PHP OO :

Visibilité - Autoload - Namespace - Interface

(par default, une proprieté sans precision sur sa visibilité sera considerée public)

-------------
2/
SYMPHONY:

-intro: qu'est-ce que SYMFONY
étape 1 : installation de symfony 3.4
étape 2 : les bundles
étape 3 : les routes et mles controllers
étape 4 : Créer la boutique sur SYMFONY
étape 5 : TWIG (moteur de template)
étape 6 : les assets
étape 7 : Entités
étape 8 : Doctrine
étape 9 : les formulaires
étape 10 : validation des données
étape 11 : Association Mapping
étape 12 : sécurité des utilisateurs
étape 13 : installation et boutique sur SF 4.3
BONUS : Mise en ligne
BONUS : Formulaire de contact

-----------------

                                                                                -----------------------------
                                                                                intro: qu'est-ce que SYMFONY
                                                                                -----------------------------

Framework php créé par Sensiolabs en 2005

a - quel est l'interet d'utiliser un framework:
    1- une organisation optimisée
    2- Fonctionnalité communes a tous les projets
    3- Services disponibles (Routing, Securité, BDD, Moteur de template, formulaire...)
    4- Communauté 

b - choix du Framework
    1- propre framework (pedagogie)
    2- Les framework fullstack(Symfony, Zend, Laravel, Cake)
    3- Les mini framework (Silex, Slim, CodeIgniter, Lumen...)

c - Symfony 
    -->Framework français créé par Sensiolabs
    -->versions: 
        LTS (long time support): 
            v 2.8
            v 3.4 : 2.8 mais plus souple, avec des fonctionnalités
            v 4.4 : 3.4 Bundleless, Flex, Ecore (webpack), maker, php 7.1

                                                                         --------------------------------------
                                                                         étape 1 - Installation de Symfony 3.4           
                                                                         --------------------------------------

1 - installer Composer
2 - installer sf3.4
3 - Arborescence des dossiers et fichiers
4 - Lancement de l'settings_applications

-------->

1- Composer est un outil de dépendance, il permet de telecharger et de mettre a jour tous les outils, (services, composants, dependances..) dont on a bluetooth_searching
telecharger composer: http://getcomposer.org/download/composer-setup.exe 
installer puis suivre les étapes

2- installer symfony 3.4
On va dans le dossier Symfony, 'maj' + 'clic droit' puis ouvrir l'invite de commande (powershell, ou git bash here) ici.

en ligne de commandes: composer create-project symfony/framework-standart-edition test

3- Arbrescence des dossiers et fichiers
        dossiers:
        - app/               : contient toutes la configuration de l'app (BDD, securité, routes...)
        - bin/               : les executables de l'app (donc de sf)                   
        - src/               : Le dossier dans lequel nous allons coder notre MVC (c'est ici que l'on va coder 99% du temps)
        - var/               : les fichiers écrits par sf au fur et a mesure (cache, logs)
        - tests/             : Les tests unitaires.
        - web/               : repertoire web (app.php ou app_dev.php, equivalent de index.php pour symfony)
        - vendor/            : Le coeur de Symfony, (les fichiers codés par les sensio labs)
        
        fichiers:  
        - composer.json      : Contient la liste de toutes les dependances dont on a besoin.

4 - Lancement de l'application

        methode 1 :
        Localhost/back/wf3/symfony/test/web/app.php
        Localhost/back/wf3/symfony/test/web/app_dev.php (affiche une petite barre de develkoppement en bas)

        methode 2 :
        on va dans le dossier test/ et en ligne de commande:
        php bin/console server:run

        puis dans le navigateur,    localhost:8000  (par defaut on est en mode dev, avec la barre de dev en bas)

        -nous allons travailler en mode dev, avant de passer en mode prod
        - à ce stade notre application affiche la page de bienvenue sur Symfony, cela signifie que tout va bien 

                                                                --------------------------------------------
                                                                          étape 2 : les bundles
                                                                --------------------------------------------     

1/ Le concept des bundles

   - Les bundles sont des briques de notre application (des modules)

   par exemple: 
                Userbundle:
                        UserController (C)
                        UserModel (M)
                        View : inscription/connexion/profil...

  Avec la nouvelle version de Symfony (4), on considere qu'il est préferable de créer un seul bundle (AppBundle) , auparavant on fonctionnait par bundle, un dossier par brique et nos fichiers mvc a l'interieur
  Nous allons créer un bundle: POLES/TestBundle

        en ligne de commandes, on va taper (au choix soit dans notre dossier de projet, soit dans le terminal de VCstudio) 
  <cmd>     
        - php bin/console generate:bundle     
        - Are you planning on sharing this bundle across multiple applications? [no]: on met yes ou 'y' pour creer un bundle    
        - nous créerons un bundle POLES/TestBundle (donc un nameSpace)
        - le creer dans les dossier src? on tape enter
        - configuration format: on va choisir: annotation
        (notre bundle a été créé mais il faut l'enregistrer dans composer.json)
        - on ouvre dans notre ide, le fichier composer.json, puis dans psr-4 on rajoute une virgule apres appBundle, puis: "POLES\\":"src/POLES"
        - puis dans le terminal: composer update   

A present notre bundle existe dans src/POLES/TestBundle
        il est composé de 4 dossiers: -controller : tous les controller du bundle 
                                      -DependencyInjection : injection de dependances 
                                      -Resources : Vues et Routes (YML) et eventuellement JS 
                                      -Test : test liés aux fonctionnalitésdu bundle

A ce stade le bundle est fonctionnel, mais il y'a une petite erreur, qu'on va corriger:
        nous allons dans : src/POLES/TestBundle/Controller/DefaultController.php
        puis a la ligne: return $this->render('POLESTestBundle:Default:index.html.twig'); 
        on la réécrit comme ceci:  return $this->render('@POLESTest/Default/index.html.twig');    

        apres avoir corriger la syntaxe, on voit apparaitre la page d'accueil 'Hello World'.                                 

                                                                -----------------------------------------------------
                                                                     étape 3 : les routes et mles controllers
                                                                -----------------------------------------------------

1/ création de routes

        ("/") -> route simple homepage
        ("/bonjour/") -> route echo (erreur)
        ("/bonjour2/") -> route response
        ("/hello/{prenom}") -> route response + param URL
        ("/hola/{prenom}") -> route render de vue (html.twig) + param URL
        ("/ciao/{prenom}/{age}") -> route render de vue + 2 params URL
        ("/redirect/") -> route avec redirection (RedirectResponse)
        ("/redirect2/") -> route avec redirection (redirectToRoute())
        ("/message/") -> route avec redirect et message en session



2/ L'objet Request

        L'objet Request correspond a la partie request d'une requete http        

        <code>
              use Symfony\Component\HttpFoundation\Request;
              correspond a la partie 'requete' d'une requete http

        <ex code>
        $session $$request->getSession();
        recupere la session ($_SESSION)

        Autres exemples: 

        $session->set('prenom', 'Sylvain');
        echo $session->get('prenom');

        $request->session->set('prenom', 'Sylvain');

        Autre utilité de $request: 

        $request ->query->get('argument_url');
        $request ->request->get('champs_form');
        $request ->cookies->get('cookie');
        $request ->server->get('infos_serveur');

3/ L'objet Response

        L'objet Response correspond a la partie reponse d'une requete http

        <code>
                use Symfony\Comonent\HttpFoundation\Response;

                Toute action (fonction) doit avoir une réponse.

                return new Response('toto');

                meme la fonction render() est une réponse.

                <code>
                return $this->render();
                return $this-> getTemplateting->renderResponse(); 
                cette derniere ligne fait la meme chose que celle juste au dessus

4/ Redirection

        <code> premiere methode :
        Use Symfony\Component\HttpFoudation\RedirectResponse;

        se referer à: route "/redirect/" et "/redirect2/"

        /!\ A ce stade toutes nos routes doivent avoir un name

5/ Message

        <code>

        $session->getFlashBag()->add;

        permet d'enregistrer des messages qui seront disponibles dans d'autres pages (messages de felicitation , ou d'erreurs)

        app.session : qui nous permet en twig de recuperer les infos en session

        app.user : qui nous permet en twig de recuperer les infos de l'utilisateur actuellement connectés


                                                                -----------------------------------------------
                                                                    étape 4 : Créer la boutique sur SYMFONY
                                                                -----------------------------------------------   

1/ Créaion du projet   

        -dans le dossier symfony
        <cmd>
                composer create-project symfony/framework-sandard-edition Boutique3
                cd boutique3
                php bin/console server:run

        Test : localhost:8000        

2/Reorganiser le AppBundle

        A ce stade, on a créé 3 routes dans ProduitController:
                localhost/                  ---> index.html.twig
                localhost/categorie/pull    ---> index.html.twig
                localhost/produit/12        ---> show.html.twig

        -> creation de nos controllers:
                AdminController
                MembreController
                CommandeController
                ProduitController

        -> création de nos vues 
                Admin/ (list_produit, form_produit etc...)
                Membre/ (connection, inscription, profil ...)
                Commande/ (panier, transport, livraison, paiement...)
                Produit/ (home, categorie, boutique, fiche_produit...)

3/ création des premieres routes

        --> ProduitController: "/", "/produit/{id}/" etc...
        --> AdminController : "/admin/produit/", "/admin/membre/" etc...

                                                               ----------------------------------------------
                                                                     étape 5 : TWIG (moteur de template)
                                                               ----------------------------------------------     

Twig est le moteur de template de Symfony, un moteur de template(tpl, smarty, Twig, blade...) permet d'afficher du php dans les vues HTML de maniere plus simple
        exemple : au lieu d'afficher du php comme ceci <?= $membre['prenom']?>, en twig cela donnera {{membre.prenom}} 
       
1/ creation du layout 

        un Layout est une structure de page, dans laquelle on peut ajouter des éléments/ du contenu. Le concept des layout permet d'avoir plusieurs structures de pages dans notre site: exemple front et backoffice. pourtant c'est le meme site.

    - dans SF 3.4 , on a un endroit specifique ou il faut mettre le layout (dans app/Resources/views)

       chemin(pour notre projet): Boutique3/app/Resources/views/layout.html.twig

2/ L'heritage twig 

        Avec Twig, on parle d'heritage, cela signifie que nos vue heritent (extends) d'un layout. et peuvent contenir de l'HTML à l'interieur des blocks disponibles (créés dans le layout).

        De maniere generale, il faut voir le fonctionnement de Twig et de la methode render comme un chargement de contenude maniere "empilée" (analogie de la poupée russe...)
        . Render temporise (mémoire tampon) le contenu et affiche en meme temps l layout, la vue et les params.

3/ modification de nos vues

        <code>
        {% extends 'layout.html.twig %}
        {% block content %}
        Contenu HTML de la page
        {% endblock %}

        /!\ Attention, quand on utilise l'heritage Twig, nos vues ne peuvent contenir de l'html qu'a l'interieur des blocks prevus pour


4/ Documentation twig

        https://twig.symfony.com/doc/2.x/

        Dans les twigs référence, on trouve dans les filtres ce qui permet de formater l'ecriture, les dates, majuscules, conditions, securités... dont on se servira dans nos projets.

------> A ce stade, notre application permet d'afficher les pages, accueil, inscription, connexion, profil, botique, produit, categorie, gestion membre, gestion produit, gestion commande. 

------> Par contre nous ne sommes pas encore en mesure d'echenger avec la base de donnée (ajouter du contenu, et afficher ce contenu). Il faut voir les entités et Doctrine.


                                                                        -------------------------------
                                                                                étape 6 : ASSETS
                                                                        -------------------------------



                                                                        -------------------------------
                                                                                étape 7 : ENTITES
                                                                        -------------------------------

1/ Doctrine ORM et le concept des Entités (Entity)

        -D'une certaine maniere, les entités correspondent a la partie model de notre MVC, c'est la relation avec la bdd, mais en PHP et non en SQL.
        Theoriquement, nous n'aurions plus besoin du SQL a partir de maintenant.

        -ORM: Object Relation Mapping 

        -Nous allons créer nos entités sous forme de class PHP (POPO : Plain Old PHO Object) qui vont permettre à Doctrine de comprendre notre base de donnée et de la manipuler.

        -Par exemple : pour faire INSERT INTO Produit, on fera $produit = new Produit;
                                                               persist($produit);  pour ajouter, si on voulait supprimmer, ce seraitremove a la place de persist
        
        Pour que tout cela soit possible il faut expliquer a Doctrine quelle relation il existe entre la BDD et nos Entity

2/ Créer Entité produit

        a- Creer le dossier Entity dans src/AppBundle/

        b- Creer le fichier Produit.php : src/AppBundle/Entity/Produit.php

        c- Creer notre class Produit et nos proprietés

3/ Annotations (mapping)
4/ Mettre a jour la BDD
5/ Generer les Entités en ligne de commande
6/ Generer mes Entités via les Entités
7/ Generer les Entités depuis la BDD            